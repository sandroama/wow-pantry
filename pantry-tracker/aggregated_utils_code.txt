Folder: src/utils
File: auth.js

import { auth } from './firebase';
import { GoogleAuthProvider, signInWithPopup, signOut as firebaseSignOut } from 'firebase/auth';

export const signInWithGoogle = async () => {
  const provider = new GoogleAuthProvider();
  try {
    await signInWithPopup(auth, provider);
  } catch (error) {
    console.error("Error signing in with Google", error);
    throw error;
  }
};

export const signOut = async () => {
  try {
    await firebaseSignOut(auth);
  } catch (error) {
    console.error("Error signing out", error);
    throw error;
  }
};

Folder: src/utils
File: theme.js

import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: '#3498db',
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#2ecc71',
    },
    background: {
      default: '#ecf0f1',
      paper: '#ffffff',
    },
    text: {
      primary: '#2c3e50',
      secondary: '#7f8c8d',
    },
    error: {
      main: '#e74c3c',
    },
  },
  components: {
    MuiAppBar: {
      styleOverrides: {
        root: {
          backgroundColor: '#3498db',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          fontWeight: 'bold',
          borderRadius: '8px',
        },
        containedPrimary: {
          backgroundColor: '#2ecc71',
          '&:hover': {
            backgroundColor: '#27ae60',
          },
        },
      },
    },
    MuiTextField: {
      styleOverrides: {
        root: {
          '& .MuiOutlinedInput-root': {
            borderRadius: '8px',
          },
        },
      },
    },
    MuiList: {
      styleOverrides: {
        root: {
          borderRadius: '8px',
          overflow: 'hidden',
        },
      },
    },
    MuiListItem: {
      styleOverrides: {
        root: {
          '&:hover': {
            backgroundColor: '#f5f5f5',
          },
        },
      },
    },
  },
});

export default theme;

Folder: src/utils
File: image-loader.js

export default function imageLoader({ src, width, quality }) {
    if (src.startsWith('https://') || src.startsWith('http://')) {
      // For external URLs, return the URL as is
      return src;
    }
    // For internal images, use your custom logic (adjust as needed)
    return `https://your-internal-image-host.com/${src}?w=${width}&q=${quality || 75}`
  }

Folder: src/utils
File: firebase.js

import { initializeApp, getApps } from 'firebase/app';
import { getFirestore, connectFirestoreEmulator } from 'firebase/firestore';
import { getAuth, connectAuthEmulator } from 'firebase/auth';

const firebaseConfig = {
    apiKey: "AIzaSyDOu-4Uv6NBDKpeIMlh6KZ03FQ1gcBnUm4",
    authDomain: "wowpantry.firebaseapp.com",
    projectId: "wowpantry",
    storageBucket: "wowpantry.appspot.com",
    messagingSenderId: "223141110008",
    appId: "1:223141110008:web:b9498fda0a7fd715ed9b0d",
    measurementId: "G-Q6BXLWLZ88"
  };

// Initialize Firebase
const app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];
const db = getFirestore(app);
const auth = getAuth(app);

if (process.env.NODE_ENV === 'development') {
  connectFirestoreEmulator(db, 'localhost', 8080);
  connectAuthEmulator(auth, 'http://localhost:9099');
}

export { db, auth };

