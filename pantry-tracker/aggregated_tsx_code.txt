File: layout.js

import ThemeRegistry from '@/components/ThemeRegistry'

export const metadata = {
  title: 'Pantry Tracker',
  description: 'Track your pantry items and get recipe suggestions',
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <ThemeRegistry>
        <body>{children}</body>
      </ThemeRegistry>
    </html>
  )
}

File: page.js

'use client'

import React, { useState, useEffect } from 'react';
import { Box, Typography, Button, TextField, Grid, Paper } from '@mui/material';
import { signInWithGoogle, signOut } from '../utils/auth';
import { auth, db } from '../utils/firebase';
import { collection, addDoc, deleteDoc, doc, onSnapshot, updateDoc } from 'firebase/firestore';
import PantryList from '../components/PantryList';
import RecipeSuggestions from '../components/RecipeSuggestions';
import FavoriteRecipes from '../components/FavoriteRecipes';
import NutritionalInfo from '../components/NutritionalInfo';

export default function Home() {
  const [user, setUser] = useState(null);
  const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState({ name: '', quantity: 1, weight: 0, unit: 'g' });
  const [recipes, setRecipes] = useState([]);
  const [favoriteRecipes, setFavoriteRecipes] = useState([]);

  useEffect(() => {
    const unsubscribe = auth.onAuthStateChanged((user) => {
      setUser(user);
      if (user) {
        const itemsRef = collection(db, 'users', user.uid, 'items');
        const unsubscribeItems = onSnapshot(itemsRef, (snapshot) => {
          const itemsList = snapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));
          setItems(itemsList);
        });

        const favoritesRef = collection(db, 'users', user.uid, 'favoriteRecipes');
        const unsubscribeFavorites = onSnapshot(favoritesRef, (snapshot) => {
          const favoritesList = snapshot.docs.map(doc => ({id: doc.id, ...doc.data()}));
          setFavoriteRecipes(favoritesList);
        });

        return () => {
          unsubscribeItems();
          unsubscribeFavorites();
        };
      }
    });
    return () => unsubscribe();
  }, []);

  const addItem = async () => {
    if (newItem.name.trim() !== '' && user) {
      await addDoc(collection(db, 'users', user.uid, 'items'), newItem);
      setNewItem({ name: '', quantity: 1, weight: 0, unit: 'g' });
    }
  };

  const deleteItem = async (itemId) => {
    if (user) {
      await deleteDoc(doc(db, 'users', user.uid, 'items', itemId));
    }
  };

  const updateItem = async (updatedItem) => {
    if (user) {
      await updateDoc(doc(db, 'users', user.uid, 'items', updatedItem.id), updatedItem);
    }
  };

  const handleInputChange = (e) => {
    setNewItem({ ...newItem, [e.target.name]: e.target.value });
  };

  const saveRecipe = async (recipe) => {
    if (user) {
      await addDoc(collection(db, 'users', user.uid, 'favoriteRecipes'), { recipe });
    }
  };

  const deleteRecipe = async (recipeId) => {
    if (user) {
      await deleteDoc(doc(db, 'users', user.uid, 'favoriteRecipes', recipeId));
    }
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        Pantry Tracker
      </Typography>
      {user ? (
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
              <Typography>Welcome, {user.displayName}!</Typography>
              <Button onClick={signOut}>Sign Out</Button>
              <Box sx={{ mt: 2 }}>
                <TextField 
                  name="name"
                  value={newItem.name}
                  onChange={handleInputChange}
                  label="New Item"
                  sx={{ mr: 1 }}
                />
                <TextField 
                  name="quantity"
                  type="number"
                  value={newItem.quantity}
                  onChange={handleInputChange}
                  label="Quantity"
                  sx={{ mr: 1, width: '80px' }}
                />
                <TextField 
                  name="weight"
                  type="number"
                  value={newItem.weight}
                  onChange={handleInputChange}
                  label="Weight"
                  sx={{ mr: 1, width: '80px' }}
                />
                <TextField 
                  name="unit"
                  value={newItem.unit}
                  onChange={handleInputChange}
                  label="Unit"
                  sx={{ mr: 1, width: '80px' }}
                />
                <Button onClick={addItem}>Add Item</Button>
              </Box>
            </Paper>
            <PantryList items={items} onDeleteItem={deleteItem} onUpdateItem={updateItem} />
          </Grid>
          <Grid item xs={12} md={6}>
            <RecipeSuggestions items={items} onSaveRecipe={saveRecipe} />
            <FavoriteRecipes recipes={favoriteRecipes} onDeleteRecipe={deleteRecipe} />
            <NutritionalInfo items={items} />
          </Grid>
        </Grid>
      ) : (
        <Button onClick={signInWithGoogle}>Sign In with Google</Button>
      )}
    </Box>
  );
}

File: PantryItem.js

import React, { useState } from 'react';
import { ListItem, ListItemText, IconButton, TextField, Box } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import SaveIcon from '@mui/icons-material/Save';

const PantryItem = ({ item, onDeleteItem, onUpdateItem }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedItem, setEditedItem] = useState(item);

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleSave = () => {
    onUpdateItem(editedItem);
    setIsEditing(false);
  };

  const handleChange = (e) => {
    setEditedItem({ ...editedItem, [e.target.name]: e.target.value });
  };

  return (
    <ListItem>
      {isEditing ? (
        <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
          <TextField
            name="name"
            value={editedItem.name}
            onChange={handleChange}
            sx={{ mr: 1 }}
          />
          <TextField
            name="quantity"
            type="number"
            value={editedItem.quantity}
            onChange={handleChange}
            sx={{ mr: 1, width: '80px' }}
          />
          <TextField
            name="weight"
            type="number"
            value={editedItem.weight}
            onChange={handleChange}
            sx={{ mr: 1, width: '80px' }}
          />
          <TextField
            name="unit"
            value={editedItem.unit}
            onChange={handleChange}
            sx={{ mr: 1, width: '80px' }}
          />
          <IconButton onClick={handleSave}>
            <SaveIcon />
          </IconButton>
        </Box>
      ) : (
        <>
          <ListItemText 
            primary={item.name} 
            secondary={`Quantity: ${item.quantity}, Weight: ${item.weight} ${item.unit}`} 
          />
          <IconButton edge="end" aria-label="edit" onClick={handleEdit}>
            <EditIcon />
          </IconButton>
          <IconButton edge="end" aria-label="delete" onClick={() => onDeleteItem(item.id)}>
            <DeleteIcon />
          </IconButton>
        </>
      )}
    </ListItem>
  );
};

export default PantryItem;

File: MealPlanning.js



File: ThemeRegistry.js

'use client'

import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import theme from '@/utils/theme';

export default function ThemeRegistry({ children }) {
  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      {children}
    </ThemeProvider>
  );
}

File: NutritionalInfo.js

import React, { useState } from 'react';
import { Button, Typography, CircularProgress, List, ListItem, ListItemText, Paper } from '@mui/material';
import { getLlamaResponse } from '@/utils/llamaApi';

const NutritionalInfo = ({ items }) => {
  const [info, setInfo] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchNutritionalInfo = async () => {
    setLoading(true);
    const nutritionalInfo = [];
    for (const item of items) {
      const prompt = `Provide brief nutritional information for ${item.weight} ${item.unit} of ${item.name}. Include calories, macronutrients, and any notable vitamins or minerals. Keep it concise.`;
      try {
        const response = await getLlamaResponse(prompt);
        nutritionalInfo.push({ name: item.name, info: response });
      } catch (error) {
        console.error("Error fetching nutritional information:", error);
        nutritionalInfo.push({ name: item.name, info: "Error fetching information" });
      }
    }
    setInfo(nutritionalInfo);
    setLoading(false);
  };

  return (
    <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom>
        Nutritional Information
      </Typography>
      <Button 
        variant="contained" 
        color="primary" 
        onClick={fetchNutritionalInfo} 
        disabled={loading || items.length === 0}
      >
        Get Nutritional Info
      </Button>
      {loading && <CircularProgress sx={{ ml: 2 }} />}
      {info.length > 0 && (
        <List>
          {info.map((item, index) => (
            <ListItem key={index}>
              <ListItemText primary={item.name} secondary={item.info} />
            </ListItem>
          ))}
        </List>
      )}
    </Paper>
  );
};

export default NutritionalInfo;

File: FavoriteRecipes.js

import React from 'react';
import { List, ListItem, ListItemText, IconButton, Paper, Typography } from '@mui/material';
import DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';

const FavoriteRecipes = ({ recipes, onDeleteRecipe }) => {
  return (
    <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom>
        Favorite Recipes
      </Typography>
      <List>
        {recipes.map((recipe) => (
          <ListItem key={recipe.id}>
            <ListItemText 
              primary={recipe.recipe.split('\n')[0]} 
              secondary={recipe.recipe.split('\n').slice(1, 3).join('\n')} 
            />
            <IconButton edge="end" aria-label="delete" onClick={() => onDeleteRecipe(recipe.id)}>
              <DeleteOutlineIcon />
            </IconButton>
          </ListItem>
        ))}
      </List>
    </Paper>
  );
};

export default FavoriteRecipes;

File: RecipeSuggestions.js

import React, { useState } from 'react';
import { Button, TextField, Typography, Paper, CircularProgress } from '@mui/material';
import { getLlamaResponse } from '@/utils/llamaApi';

const RecipeSuggestions = ({ items, onSaveRecipe }) => {
  const [recipe, setRecipe] = useState('');
  const [loading, setLoading] = useState(false);

  const generateRecipe = async () => {
    setLoading(true);
    const ingredients = items.map(item => `${item.quantity} ${item.unit} of ${item.name}`).join(', ');
    const prompt = `Given these ingredients: ${ingredients}, suggest a recipe that uses as many of these ingredients as possible. Provide the recipe name, ingredients list, and step-by-step instructions.`;

    try {
      const generatedRecipe = await getLlamaResponse(prompt);
      setRecipe(generatedRecipe);
    } catch (error) {
      console.error("Error generating recipe:", error);
      setRecipe("Sorry, there was an error generating the recipe. Please try again later.");
    }
    setLoading(false);
  };

  return (
    <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom>
        Recipe Suggestions
      </Typography>
      <Button 
        variant="contained" 
        color="primary" 
        onClick={generateRecipe} 
        disabled={loading || items.length === 0}
      >
        Generate Recipe
      </Button>
      {loading && <CircularProgress sx={{ ml: 2 }} />}
      {recipe && (
        <>
          <TextField
            fullWidth
            multiline
            rows={10}
            value={recipe}
            variant="outlined"
            margin="normal"
            InputProps={{
              readOnly: true,
            }}
          />
          <Button
            variant="outlined"
            color="secondary"
            onClick={() => onSaveRecipe(recipe)}
          >
            Save Recipe
          </Button>
        </>
      )}
    </Paper>
  );
};

export default RecipeSuggestions;

File: PantryList.js

import React from 'react';
import { List, ListItem, ListItemText, Button } from '@mui/material';

const PantryList = ({ items, onDeleteItem }) => {
  return (
    <List>
      {items.map((item) => (
        <ListItem key={item.id}>
          <ListItemText primary={item.name} secondary={`Quantity: ${item.quantity}`} />
          <Button onClick={() => onDeleteItem(item.id)}>Delete</Button>
        </ListItem>
      ))}
    </List>
  );
};

export default PantryList;

